↓Init [steps.SimpleStep-1664812149982]: 
  expression: |
    'let fsclient = com.twinsoft.convertigo.engine.Engine.theApp.couchDbManager.getFullSyncClient();
    let res = new org.codehaus.jettison.json.JSONObject();
    
    try {
    	data = JSON.parse(data);
    } catch (e) {
    	data = {};
    }
    
    var toJSONObject = (obj) => {
    	return new org.codehaus.jettison.json.JSONObject(JSON.stringify(obj));
    };
    
    var toJSONArray = (obj) => {
    	return new org.codehaus.jettison.json.JSONArray(JSON.stringify(obj));
    };
    
    var toQuery = (obj) => {
    	let k, query = new java.util.HashMap();
    	for (k in obj) {
    		query.put(k.toLowerCase(), JSON.stringify(obj[k]));
    	}
    	return query;
    };
    
    var remove = (obj, key) => {
    	let v = obj[key];
    	delete obj[key];
    	return v;
    };
    '
↓jIf [steps.IfStep-1665049900863]: 
  condition: (version = "v2") != context.project.get("init")
  ↓SetDataDesign [steps.SimpleStep-1665049987760]: 
    expression: |
      'let ddocid = "_design/EditableGridView";
      let ddoc = fsclient.getDocument(database, ddocid);
      if (ddoc.has("error") || !ddoc.has("version") || ddoc.getString("version") != version) {
      	let design = {
      		_id: ddocid,
      		version: version,
      		filters: {},
      		updates: {},
      		views: {
      			view: {
      				reduce: "_count",
      				map: "\
      function (doc) {\r\n\
        try {\r\n\
          if (\"type\" in doc) {\r\n\
            var key, i;\r\n\
            for (i in doc) {\r\n\
              key = i;\r\n\
              break;\r\n\
            }\r\n\
            emit([doc.type, doc[key]], null);\r\n\
          }\r\n\
        } catch (err) {\r\n\
          log(err.message);\r\n\
        }\r\n\
      }"
      			}
      		}
      	};
      	if (ddoc.has("_rev")) {
      		design._rev = ddoc.getString("_rev"); 
      	}
      	ddoc = toJSONObject(design);
      	ddoc = fsclient.postDocument(database, ddoc, null, com.twinsoft.convertigo.engine.enums.CouchPostDocumentPolicy.none, null, true);
      	log.warning("updated:\n" + ddoc.toString(2));
      }
      
      context.project.set("init", version);'
↓Exec [steps.SimpleStep-1665048362259]: 
  expression: |
    'if (action == "get") {
    	res = fsclient.getDocument(database, data["_id"]);
    } else if (action == "post") {
    	let doc = toJSONObject(data);
    	res = fsclient.postDocument(database, doc, null, com.twinsoft.convertigo.engine.enums.CouchPostDocumentPolicy.none, null, false);
    } else if (action == "view") {
    	let ddoc = remove(data, "ddoc");
    	let view = remove(data, "view");
    	
    	res = fsclient.getView(database, ddoc, view, toQuery(data));
    } else if (action == "delete") {
    	res = fsclient.deleteDocument(database, data["_id"], data["_rev"]);
    } else if (action == "bulkDocs") {
    	let docs = toJSONArray(data["docs"]);
    	res = fsclient.postBulkDocs(database, docs, true, true, com.twinsoft.convertigo.engine.enums.CouchPostDocumentPolicy.none, null, false);
    }
    
    res.remove("_c8oMeta");
    res.remove("~c8oACL");
    
    if (Object.keys(res).length > 0) {
    	com.twinsoft.convertigo.engine.util.XMLUtils.jsonToXml(res, dom.getDocumentElement());
    }'
↓database [variables.RequestableVariable-1664812275328]: 
↓action [variables.RequestableVariable-1664812201472]: 
↓data [variables.RequestableVariable-1664812218212]: 